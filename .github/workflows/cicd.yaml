name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run SonarQube scanner
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}
        with:
          projectKey: 'my-app-repo'
          projectName: 'My App Repo'

      - name: Build Docker image
        run: docker build -t my-app-repo .

  security-check:
    runs-on: self-hosted
    needs: build-and-deploy  # Ensure this job runs after build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Run Trivy Scan
        run: trivy fs --format json -o fs-report.json .

      - name: Install Gitleaks
        run: sudo apt install gitleaks -y

      - name: Run Gitleaks Code Scan
        run: gitleaks detect --source . --verbose --redact --report-format=json --report-path=gitleaks-report.json

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URL }}

      - name: Push Docker image to Amazon ECR
        run: |
          docker tag my-app-repo:latest ${{ secrets.ECR_REPOSITORY_URL }}/my-app-repo:latest
          docker push ${{ secrets.ECR_REPOSITORY_URL }}/my-app-repo:latest
