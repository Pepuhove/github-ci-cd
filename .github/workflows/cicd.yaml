name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Run SonarQube scanner
        uses: sonarqube/sonarqube-scan-action@v1
        with:
          sonarqube-url: ${{ secrets.SONARQUBE_URL }}
          sonarqube-token: ${{ secrets.SONARQUBE_TOKEN }}
          sonarqube-projectKey: 'my-app-repo'
          sonarqube-projectName: 'My App Repo'

      - name: Build Docker image
        run: docker build -t my-app-repo .

  security-check:
    runs-on: self-hosted
    needs: build-and-deploy  # Ensure this job runs after build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Run Trivy Scan
        run: trivy fs --format table -o fs-report.json .

      - name: Install Gitleaks
        run: sudo apt install gitleaks -y

      - name: Run Gitleaks Code Scan
        run: gitleaks detect --source . --report-path gitleaks-report.json --format json

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_URL }}

      - name: Login to Amazon ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Push Docker image to Amazon ECR
        run: |
          docker tag my-app-repo:latest ${{ secrets.ECR_REPOSITORY_URL }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URL }}:latest
